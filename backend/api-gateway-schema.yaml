openapi: "3.0.1"
info:
  title: "manag.ly"
  description: "This is the manag.ly API"
  version: "1.0.0"
servers:
- url: "https://y1ix8qw498.execute-api.us-east-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "/staging"
paths:
  /projects/{projectId}/team:
    get:
      operationId: "viewTeamView"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          content: {}
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /projects:
    get:
      operationId: "listProjects"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfProjectResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:ListProjectsHandler/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      operationId: "createProject"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRequest"
        required: true
      responses:
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "201":
          description: "201 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:CreateProjectHandler/invocations"
        responses:
          ".*\\\"httpStatus\\\":409.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}"
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"projectId\"\
                \ : $inputRoot.id,\n  \"archived\": $inputRoot.archived,\n  \"title\"\
                : \"$inputRoot.title\",\n  \"tasks\": [],\n  \"teammates\": []\n}"
          ".*\\\"httpStatus\\\":500.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{ \"statusCode\": 200 }"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /tasks/{taskId}/decompose:
    post:
      operationId: "decomposeTask"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DecomposeRequest"
        required: true
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "201":
          description: "201 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:DecomposeTaskHandler/invocations"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')"
          ".*\\\"httpStatus\\\":400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":403.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
        requestTemplates:
          application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
            ##  This template will pass through all parameters including path, querystring,\
            \ header, stage variables, and context through to the integration endpoint\
            \ via the body/payload\n\n{\n  \"taskId\": $input.params('taskId'),\n\
            \  \"subtasks\": $input.json('$.subtasks')\n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /tasks/{taskId}/assignments/{teammateId}/unassign:
    post:
      operationId: "unassignTeammate"
      parameters:
      - name: "teammateId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:UnassignTeammateHandler/invocations"
        responses:
          ".*\\\"httpStatus\\\":409.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')"
          ".*\\\"httpStatus\\\":500.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":403.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"taskId\"\
            : $input.params('taskId'),\n  \"teammateId\": $input.params('teammateId')\n\
            }"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "teammateId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /projects/{projectId}:
    get:
      operationId: "getProject"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:GetProjectHandler/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($allParams = $input.params())\n$input.json('$')\n"
          ".*\\\"httpStatus\\\":500.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"projectId\"\
            : $input.params('projectId') \n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /projects/{projectId}/delete:
    post:
      operationId: "deleteProject"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:DeleteProjectHandler/invocations"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{}"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"projectId\"\
            : $input.params('projectId') \n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /tasks/{taskId}/completed/{value}:
    post:
      operationId: "completeTask"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "value"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:MarkTaskHandler/invocations"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')"
          ".*\\\"httpStatus\\\":400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*\\\"httpStatus\\\":403.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"taskId\"\
            : $input.params('taskId'),\n  \"markTask\": $input.params('value')\n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "value"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /tasks/{taskId}/assignments:
    post:
      operationId: "assignTeammate"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignmentRequest"
        required: true
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:AssignTeammateHandler/invocations"
        responses:
          ".*\\\"httpStatus\\\":409.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')"
          ".*\\\"httpStatus\\\":400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":403.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"taskId\"\
            : $input.params('taskId'),\n  \"teammateId\": $inputRoot.teammateId\n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /tasks:
    post:
      operationId: "addTask"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
        required: true
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "201":
          description: "201 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:AddTaskHandler/invocations"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')"
          ".*\\\"httpStatus\\\":400.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}"
          ".*\\\"httpStatus\\\":403.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /projects/{projectId}/archive:
    post:
      operationId: "archiveProject"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:ArchiveProjectHandler/invocations"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')"
          ".*\\\"httpStatus\\\":403.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"projectId\"\
            : $input.params('projectId') \n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /teammates/{teammateId}/delete:
    post:
      operationId: "deleteTeammate"
      parameters:
      - name: "teammateId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "410":
          description: "410 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "204":
          description: "204 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:RemoveTeammateHandler/invocations"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')\n"
          ".*\\\"httpStatus\\\":500.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}"
          ".*\\\"httpStatus\\\":410.*":
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":403.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"teammateId\"\
            : $input.params('teammateId') \n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "teammateId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /tasks/{taskId}:
    options:
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PATCH'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    patch:
      operationId: "renameTask"
      parameters:
      - name: "taskId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
        required: true
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:RenameTaskHandler/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')"
          ".*\\\"httpStatus\\\":403.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n#set ($obj = $util.parseJson($input.json('$')))\n\
            {\n  \"taskId\": $input.params('taskId'),\n  \"name\": \"$obj.name\"\n\
            }"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /teammates:
    post:
      operationId: "addTeammate"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeammateRequest"
        required: true
      responses:
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "201":
          description: "201 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeammateResponse"
        "409":
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "403":
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:317991882978:function:AddTeammateHandler/invocations"
        responses:
          ".*\\\"httpStatus\\\":409.*":
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}"
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "$input.json('$')"
          ".*\\\"httpStatus\\\":403.*":
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
          ".*\\\"httpStatus\\\":404.*":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\
                {\n    \"statusCode\" : $errorMessageObj.httpStatus,\n    \"message\"\
                \ : \"$errorMessageObj.message\",\n    \"request-id\" : \"$errorMessageObj.requestId\"\
                \n}\n"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    TeammateRequest:
      required:
      - "name"
      - "projectId"
      type: "object"
      properties:
        name:
          type: "string"
        projectId:
          type: "integer"
          format: "int32"
    ArrayOfProjectResponse:
      type: "array"
      items:
        $ref: "#/components/schemas/ProjectResponse"
    ProjectResponse:
      required:
      - "archived"
      - "projectId"
      - "title"
      type: "object"
      properties:
        projectId:
          type: "integer"
          format: "int32"
        title:
          type: "string"
        archived:
          type: "boolean"
        team:
          type: "array"
          items:
            $ref: "#/components/schemas/TeammateResponse"
        tasks:
          type: "array"
          items:
            $ref: "#/components/schemas/TaskResponse"
    DecomposeRequest:
      required:
      - "subtasks"
      type: "object"
      properties:
        subtasks:
          type: "array"
          items:
            $ref: "#/components/schemas/TaskRequest"
    ProjectRequest:
      required:
      - "title"
      type: "object"
      properties:
        title:
          type: "string"
    TeammateResponse:
      required:
      - "name"
      - "teammateId"
      type: "object"
      properties:
        teammateId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        assignedTasks:
          type: "array"
          items:
            $ref: "#/components/schemas/TaskResponse"
    TaskRequest:
      required:
      - "name"
      - "projectId"
      type: "object"
      properties:
        name:
          type: "string"
        projectId:
          type: "integer"
          format: "int32"
        taskParent:
          type: "integer"
          format: "int32"
    AssignmentRequest:
      required:
      - "teammateId"
      type: "object"
      properties:
        teammateId:
          type: "integer"
          format: "int32"
    GenericErrorResponse:
      required:
      - "error"
      - "statusCode"
      type: "object"
      properties:
        statusCode:
          type: "integer"
          format: "int32"
        error:
          type: "string"
    TaskResponse:
      required:
      - "completed"
      - "name"
      - "taskId"
      - "taskNumber"
      type: "object"
      properties:
        taskId:
          type: "integer"
          format: "int32"
        taskNumber:
          type: "string"
        name:
          type: "string"
        completed:
          type: "boolean"
        assignedTo:
          type: "array"
          items:
            $ref: "#/components/schemas/TeammateResponse"
        subTasks:
          type: "array"
          items:
            $ref: "#/components/schemas/TaskResponse"
        parent:
          $ref: "#/components/schemas/TaskResponse"
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
